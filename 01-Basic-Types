Typescript: 



Data Types
===========
Boolean

	let isDone: boolean = true;
	
Number: 
	
	let decimal: number = 6;
	
String:

	let color: string = "blue";
	color = "red"
	
Array:

	let list: number[] = [1,2,3];
	
Tuple:
	
	Tuple allows to express the type of  fixed number of elements is known
	
	let x: [string, number];
		
		x = ["cdr", 21];
		
Enum:
	
	An enum is way to set names for numeric values 
	
Any:

	if we dont the type of variable 
	
	let notSure: any = false;
	notSure = "cdr";

void:

	A function that doesn't return any value we use void
	
	void is used when absence of any data type
	
	we can use void for only functions not for variables
	
Null:


Undefined:


Never: 

	never is the return type for a function expression or an arrow function expression that always throws an exception or one that never returns;

	function fail() {
		return error("Something failed");
	}
	
Object:

	object is a type that represents the non-primitive type, i.e. any thing that is not number, string, boolean, symbol, null, or undefined
	
Type assertions

	Type assertions are a way to tell the compiler "trust me , what i am doing"
	
	type assertions are type casting in othe rlanguages
	
	type assertions has two forms
	
	1 angle bracket
	
		example:
			let str: any= "cdr is a goo dboyd";
			let strLength: number = (<string>str).length;
			
			
	2 as 
	
		let str: any= "cdr is a goo dboyd";
		let strLength: number = (str as string).length;
	
	
	